---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-ingester
  labels:
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    cortex: ingester
spec:
  replicas: {{ .Values.ingester.replicas }}

  # Ingesters are not ready for at least 1 min
  # after creation.  This has to be in sync with
  # the ring timeout value, as this will stop a
  # stampede of new ingesters if we should loose
  # some.
  minReadySeconds: 60

  # Having maxSurge 0 and maxUnavailable 1 means
  # the deployment will update one ingester at a time
  # as it will have to stop one (making one unavailable)
  # before it can start one (surge of zero)
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  selector:
    matchLabels:
      app: {{ template "name" . }}-ingester
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "name" . }}-ingester
        release: {{ .Release.Name }}
        cortex: ingester
    {{- with .Values.ingester.podAnnotations }}
      annotations:
{{ toYaml . | indent 8 }}
    {{- end }}
    spec:
      # Give ingesters 80 minutes grace to flush chunks and exit cleanly.
      # Service is available during this time, as long as we don't stop
      # too many ingesters at once.
      terminationGracePeriodSeconds: 4800

      tolerations:
{{ toYaml .Values.ingester.tolerations | indent 8 }}
      affinity:
{{ toYaml .Values.ingester.affinity | indent 8 }}

      containers:
      - name: ingester
        image: "{{ .Values.ingester.image.repository }}:{{ .Values.ingester.image.tag }}"
        imagePullPolicy: IfNotPresent
        args:
        - -ingester.join-after=30s
        - -ingester.claim-on-rollout=true
        - -ingester.search-pending-for=5m
        {{if hasKey .Values.ingester "ingesterMaxChunkAge"}}
        - -ingester.max-chunk-age={{ .Values.ingester.ingesterMaxChunkAge }}
        {{end}}
        {{if hasKey .Values.cassandra "consistency"}}
        - -cassandra.consistency={{ .Values.cassandra.consistency }}
        {{end}}
        - -consul.hostname={{ template "fullname" .}}-consul.{{ .Release.Namespace }}.svc.cluster.local:8500
        - -cassandra.addresses={{ .Values.cassandra.addresses }}
        - -cassandra.keyspace={{ .Values.cassandra.keyspace }}
        - -cassandra.timeout={{ .Values.cassandra.timeout }}
        - -cassandra.replication-factor={{ .Values.cassandra.replicationFactor }}
        - -chunk.storage-client={{ .Values.cassandra.chunkStorageClient }}
        - -cassandra.host-verification={{ .Values.cassandra.hostVerification }}
        - -cassandra.ssl={{ .Values.cassandra.ssl }}
        {{ if .Values.cassandra.auth}}
        - -cassandra.auth={{ .Values.cassandra.auth }}
        - -cassandra.username={{ .Values.cassandra.username }}
        - -cassandra.password={{ .Values.cassandra.password }}
        {{end}}

        - -dynamodb.original-table-name={{ index .Values "dynamodb" "original-table-name" }}
        {{ if not .Values.dynamodbLocal.enabled -}}
        {{ if .Values.aws.stsEnabled -}}
        - -dynamodb.url=dynamodb://$(AWS_DEFAULT_REGION)
        {{- else -}}
        - -dynamodb.url=dynamodb://$(USER_NAME):$(USER_PASSWORD)@$(AWS_DEFAULT_REGION)
        {{- end -}}
        {{- else -}}
        - -dynamodb.url=dynamodb://user:pass@{{ template "fullname" .}}-dynamodb.{{ .Release.Namespace }}.svc.cluster.local:8000
        {{- end }}

        {{ if eq .Values.s3.type "local" }}
        - -s3.url=s3://$(USER_NAME):$(USER_PASSWORD)@{{ .Values.s3.bucketName }}
        {{ else }}
        {{ if .Values.aws.stsEnabled }}
        - -s3.url=s3://{{ .Values.s3.bucketName }}
        {{ else }}
        - -s3.url=s3://$(USER_NAME):$(USER_PASSWORD)@{{ .Values.s3.bucketName }}
        {{ end }}
        {{ end }}
{{ include "cortex.tableargs" . | indent 8 }}
{{ include "cortex.memcachedArgs" . | indent 8 }}
{{ include "cortex.storeIndexMemcachedArgs" . | indent 8 }}
        ports:
        - containerPort: 80
          name: http
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
          initialDelaySeconds: 15
          timeoutSeconds: 1
        env:
          - name: AWS_DEFAULT_REGION
          {{ if .Values.aws.stsEnabled -}}
            value: "{{ .Values.aws.region }}"
          {{- else }}
            valueFrom:
              secretKeyRef:
                name: cortex-aws-creds
                key: AWS_DEFAULT_REGION
          {{- end }}
          {{ if not .Values.aws.stsEnabled -}}
          - name: USER_NAME
            valueFrom:
              secretKeyRef:
                name: cortex-aws-creds
                key: USER_NAME
          - name: USER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: cortex-aws-creds
                key: USER_PASSWORD
          {{- end }}
        resources:
{{ toYaml .Values.ingester.resources | indent 10 }}
